What Is Bash?
	The Bash shell is basically a program that provides the traditional text only user interface for linux and other unix-like operating systems. As we’ll soon learn, The terminal is a text interface. By default, terminals run a program called a shell. There are many different shell programs available, most of them with names ending in SH, like ZSH, KSH and so on. Most operating systems today run a shell called Bash, The bash shell interprets the commands typed by the user or sysadmin into a form the operating system can use. When the results are returned to the shell program, it sends them to STDOUT which, by default, displays them in the terminal. Features like tab completion, command-line recall and editing, and shortcuts like aliases all contribute to its value as a powerful shell. Its default command-line editing mode uses Emacs, but one of its really cool features is that one can change it to VI mode to use editing commands. It takes years to fully understand Bash. All the different shells work very similarly. In the Bash shell, the prompt ends with a dollar sign prompting you to type something in the terminal. It is important to not get the two confused. The terminal is the window, and bash is the language that runs in most terminal emulators. The bash shell is foundational to so many parts of securing computing devices and their networks. Intimidating and alluring, understanding the shell can make or break one’s ability to solve challenges, like CTF challenges. A root user in the bash shell is more powerful than the usual way of interacting with a device. Deleting files is permanent in the shell. Any file can be accessed at any moment in the shell, and hopefully it’s not farfetched to assert that those two things are a dangerous combination.

What is the Terminal?
	Most operating systems offer some kind of terminal-like program by default. The terminal is a way to control your computer using just text. The terminal lets you run commands that are far more powerful than anything a GUI (graphical user interface) can do for you. Apps that run in the terminal use what’s called a command line interface, or a CLI. It takes longer to learn how to use a command line interface than a GUI. But in the end, a command line interface is faster for more complicated or more repetitive tasks. This is why so many developers prefer to use the terminal. Many developer tools only offer a command line interface, not a graphical user interface. The terminal is the only way you’ll be able to perform essential tasks, like managing Docker containers, for example. Even when an app has both a CLI and a GUI available, like with the Git version control system, most developers prefer to use the CLI version. Also most servers where developers deploy apps only offer command line access. The vast majority of servers where developers deploy their software are running operating systems that are compatible with Unix. This is a  powerful OS developed in the 196j0’s. These compatible OS’s include Linux and Mac OS. All of these operating systems feature file systems and programs that work in much the same way. If you learn to use terminal programs on Linux, you’ll find they all work in much the same way on Mac OS, and vice versa.

What are Bash Commands?
	Bash commands are what you enter in the terminal command line. Most bash commands can take arguments following the command name. For example if you type the command “cat” by itself it just sits there waiting for input. That’s not very useful on its own. You’ll have to type Ctrl + C to interrupt the program and return to the command line. However if you give “cat” an argument with the name of a file, it will output the contents of that file. You will see the program's output before it returns to the command line. Bash commands can take multiple arguments separated by spaces. You can actually see the contents of two files printed out on the terminal console. If you type “cat” add a space, a first argument of a filename, add another space, and a second argument of a second filename, then hit the enter key, the cat program will take the contents of both files and concatenate them together. Concatenate is just a fancy way of saying it prints the contents out for us one file after another. Another command that takes arguments, is the echo command. Echo takes arguments and converts them into output. This makes echo a great way to understand how command line arguments work. Echo can take multiple arguments. It will print all of its arguments out joined together with spaces. You can use any combination of characters as an argument, not just letters. These were just a few examples of basic Bash commands and they can get way more complicated and do way more as needed.

Why is the Terminal Essential?
	The Terminal is absolutely essential for anyone in the Tech field regardless of their position. There are so many functions in the terminal that can be done way faster and more efficiently. One of the main things to consider is that sometimes if you make updates through the GUI it can actually break the system more frequently than not. But if you run those same updates through the terminal it happens faster and it will happen with fewer bugs and break less frequently. Also when installing applications if you already know your applications you can just run them through the terminal. It's just way faster than searching online for the software update you need. Basically anytime you need updates or installations you can always count on the terminal for a faster and more efficient way to do it. Another great reason for using the terminal is the sheer number of applications that exist for many of its shells. You can find and easily use applications for downloading YouTube videos for example. Learning the syntax for learning these tools is a little bit of a learning curve but it's well worth it. Yet another reason why the terminal is so essential is that you can batch process any application with Batch automating functions. All it takes is just a simple script which you can just write and keep on your computer so you can call the script or you can just boot up the script to copy and paste it. Recently I used a command to loop through a huge file so I can find the human readable ASCII text file among hundreds of binary files and was able to find the flag I needed for my achievement. 

What is Bash Piping?
	To understand piping in depth, let us recall for example using the “echo” command. That was an example of standard out (STDOUT). Piping on the contrary is standard in (STDIN). So for example if we type “echo hello world”. That’s 2 arguments being passed to echo and it will print them out. Piping works in the opposite order. Let's say you have a single long text file. You can run the cat command and pipe in between it and pass head as the second command. This takes the output of the cat command which is printed to standard out, then “head” seems to read it from standard in. To use pipe, you type in the vertical character next to the closing square bracket on your keyboard. This allows you to take the output of one command and use that as input for another. As a quick example, if you had a simple command called “one”, this would be your first command. You would then type a space and a pipe bar, add another space and type in command “two”, the second command. What would actually happen here is whatever commands one would output to the terminal screen are now going to be fed into command “two” as input. Essentially Bash piping allows you to send output from one script to another. You can basically transfer a single command output to another permanent one. Piping will come in handy in a variety of different ways in my ethical hacking journey.